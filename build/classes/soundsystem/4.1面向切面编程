#4.1面向切面编程
	在软件开发中,散布于应用中多处的功能被称为横切关注点.这些横切关注点从概念上是与应用的业务逻辑是相分离的(但是往往会直接嵌入到应用的业务逻辑之中).把这些横切关注点于业务逻辑相分离正是面向切面编程(AOP)所要解决的问题.

	DI有助于应用对象之间的解耦,而AOP可以实现横切关注点与它们所影响的对象之间的解耦.
	
	简而言之,横切关注点为影响应用多处的功能
	横切关注点可以被模块化为特殊的类,这些类被称为切面(aspect).
	这样的好处有:1.每个关注点都集中在一个地方,而不是分散到多处代码中
			   2.服务模块更简洁,因为它们只包含主要关注点(核心功能)的代码,而次要关注点的代码被转移到切面中
	
	#通知(advice)
		在AOP术语中,切面的工作被称为通知.通知定义了切面是什么以及何时使用.
		
	#连接点(Join point)
		连接点是在应用执行过程中能够插入切面的一个点.这个点可以是调用方法时、抛出异常时、甚至修改一个字段时(某个时间点).
		切面代码可以利用这些点插入到应用的正常流程中,并添加新的行为.
		
	#切点(Pointcut)
		如果说通知定义了切面的"什么"和"何时"的话,那么切面就定义了"何处".(例如,抄表员只负责指定区域的住户,这个区域就相当于"切点")
		切点的定义会匹配通知所要织入的一个或多个连接点.我们通常使用明确的类和方法名称或是利用正则表达式定义所匹配的类和方法名称来指定这些切点.
		
	#切面(Aspect)
		切面是通知和切点的结合.通知和切点共同定义了切面的全部内容--它是什么,在何时和何处完成其功能
		
	#引入(introduction)
		引入允许我们向现有的类添加新方法或属性.例如,我们可以创建一个Auditable通知类,该类记录了对象最后一次修改时的状态.这很简单,只需一个方法,setLastModified(Date),和一个实例变量来保存这个状态.然后这个新方法的实例变量就可以被引入到现有的类中,从而可以在无需修改这些现有的类的情况下,让它们具有新的行为和状态.
		
	#织入(Weaving)
		织入是把切面应用到目标对象并创建新的代理对象的过程.切面在指定的连接点被织入到目标对象中.在目标对象的生命周期里可以有多个点进行织入:
			编译期.类加载期.运行期.
		
		
小结:	通知包含了需要用于多个应用对象的横切行为;连接点是程序执行过程中能够应用通知的所有点;切点定义了通知被应用的具体位置(在哪些连接点).其中关键的概念是切点定义了哪些连接点会得到通知.
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		